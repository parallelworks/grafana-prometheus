permissions:
  - '*'

sessions:
  session:
    useTLS: false
    redirect: true


jobs:
  run_agent:
    ssh:
      remoteHost: ${{ inputs.resource.ip }}
    steps:
      - name: Clone repository
        run: pw agent start-existing --server=${PW_PLATFORM_HOST} -t=controller --experimental-prometheus-exporter --experimental-prometheus-exporter-port 9091 -n ${{ inputs.resource.name }}

  prepare_job_directory:
    ssh:
      remoteHost: ${{ inputs.resource.ip }}
    steps:
      - name: Clone Repository
        run: |
          mkdir -p $(dirname ${{ inputs.rundir }})
          git clone -b ${{ inputs.advanced_settings.repository_branch }} ${{ inputs.advanced_settings.repository }} ${{ inputs.rundir }}
          cd ${{ inputs.rundir }}
          git checkout ${{ inputs.advanced_settings.repository_branch }}
          git branch --set-upstream-to=origin/${{ inputs.advanced_settings.repository_branch }}
          git pull
          rm -rf logs
      - name: Edit Input Files
        run: |
          cd ${{ inputs.rundir }}
          basepath=/me/session/${PW_USER}/${{ sessions.session }}
          # Nginx conf
          cp nginx/nginx.conf.template nginx/nginx.conf
          sed -i "s|__BASE_PATH__|${basepath}|g" nginx/nginx.conf
          # Env file
          cp .env.sample .env
          sed -i "s|__BASE_PATH__|${basepath}|g" .env
          sed -i "s|__ADMIN_PASSWORD__|${{ inputs.admin_password }}|g" .env

  wait_and_run_cleanup:
    needs:
      - prepare_job_directory
    ssh:
      remoteHost: ${{ inputs.resource.ip }}
    steps:
      - name: Clone repository
        run: |
          cd ${{ inputs.rundir }}
          echo "$(date) Waiting for CANCEL file..."
          while [ ! -f "CANCEL" ]; do
              sleep 2
          done
          echo "(date) CANCEL file detected!"
          rm -f CANCEL
        cleanup: |
          set -x
          cd ${{ inputs.rundir }}
          sudo docker compose down

  start_service:
    needs:
      - prepare_job_directory
    ssh:
      remoteHost: ${{ inputs.resource.ip }}
    steps:
      - name: Start Service
        run: |
          cd ${{ inputs.rundir }}
          bash run.sh

  stream_docker_logs:
    if: ${{ always }}
    needs:
      - start_service
    ssh:
      remoteHost: ${{ inputs.resource.ip }}
    steps:
      - name: Stream Docker Logs
        run: |
          cd ${{ inputs.rundir }}
          sudo docker compose logs -f
          touch CANCEL

  create_session:
    needs:
      - start_service
    ssh:
      remoteHost: ${{ inputs.resource.ip }}
    steps:
      - name: Wait for Server To Start
        early-cancel: any-job-failed
        run: |
          TIMEOUT=5
          RETRY_INTERVAL=3
          remote_host="localhost"
          remote_port="8080"

          # Function to check if server is listening
          check_server() {
              curl --silent --connect-timeout "$TIMEOUT" "http://${remote_host}:${remote_port}" >/dev/null 2>&1
              return $?
          }

          cd ${{ inputs.rundir }}

          # Main loop
          attempt=1
          while true; do
              echo "$(date) Attempt $attempt: Checking if server is listening on ${remote_host}:${remote_port}..."
              
              if check_server; then
                  echo "$(date) Success: Server is listening on ${remote_host}:${remote_port}!"
                  exit 0
              elif [ -f job.ended ]; then
                  echo "$(date) Job was completed. Exiting... "
                  exit 0
              else
                  echo "$(date) Server not responding. Retrying in ${RETRY_INTERVAL} seconds..."
                  sleep "$RETRY_INTERVAL"
                  ((attempt++))
              fi
          done
      - name: Update Session
        uses: parallelworks/update-session
        with:
          remotePort: '8080'
          target: '${{ inputs.resource.id }}'
          name: '${{ sessions.session }}'


'on':
  execute:
    inputs:
      resource:
        type: compute-clusters
        label: Compute Cluster
        autoselect: true
        include-workspace: false
        tooltip: Resource to run the service
      admin_password:
        label: Admin Password
        type: password
      advanced_settings:
        type: group
        label: Advanced Settings
        collapsed: true
        items:
          repository:
            type: string
            label: Repository
            default: https://github.com/parallelworks/grafana-prometheus.git
          repository_branch:
            type: string
            label: Repository Branch
            default: main